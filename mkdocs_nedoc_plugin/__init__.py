"""
This plugin allows you to use links to API documentation of a Python package documented by Nedoc.

Use a link with text wrapped by backticks (`) and set the link URL to a key contained in `map.json`.
`map.json` is generated by Nedoc if you use the `create_map_json = True` configuration in `nedoc.conf`.

Links cannot span a line! Keep them on a single line.

Example:
The [`Box`](elsie.box.Box) class is awesome.
"""
import json
import os
import re
from pathlib import Path

from mkdocs.plugins import BasePlugin
from nedoc import config, core

LINK_REGEX = re.compile(r"\[`.*?`\]\((.*?)\)")


def build_nedoc(conf_path: Path):
    conf = config.parse_config(str(conf_path))
    c = core.Core(conf)
    c.build()


class NedocPlugin(BasePlugin):
    def __init__(self):
        self.site_url = None
        self.url_map = {}

    def on_pre_build(self, config, **kwargs):
        docs_dir = Path(config["docs_dir"])
        root_dir = docs_dir.parent
        conf_file = root_dir / "nedoc.conf"
        if not conf_file.exists():
            raise Exception(f"nedoc configuration file {conf_file} does not exist. Run `nedoc "
                            "init`.")
        build_nedoc(conf_file)

    def on_config(self, config, **kwargs):
        self.site_url = config.get("site_url") or "/"
        if self.site_url and self.site_url[-1] != "/":
            self.site_url = f"{self.site_url}/"
        self.site_url = f"{self.site_url}apidoc"

        docs_dir = config["docs_dir"]
        map_file = os.path.join(docs_dir, "apidoc", "map.json")

        if os.path.isfile(map_file):
            with open(map_file) as f:
                self.url_map = json.load(f)
        else:
            print(f"WARNING: {map_file} file is missing")

    def on_page_markdown(self, src: str, page, config, *args, **kwargs):
        # TODO: use Markdown parser
        lines = []
        for line in src.splitlines(keepends=False):
            # Iterate from the end to make replacing substrings easier
            for match in reversed(list(LINK_REGEX.finditer(line))):
                link_key = match.group(1)
                link_url = self.url_map.get(link_key)
                if link_url:
                    url = f"{self.site_url}/{link_url}"
                    start, end = match.span(1)
                    line = line[:start] + url + line[end:]
                else:
                    raise Exception(f"Link key {link_key} not found")
            lines.append(line)
        return "\n".join(lines)
