"""
This plugin automatically builds nedoc documentation during a mkdocs build.
It also allows you to use links to API documentation of a Python package documented by Nedoc.

Use a link with text wrapped by backticks (`) and set the link URL to a key contained in `map.json`.
`map.json` is generated by Nedoc if you use the `create_map_json = True` configuration in `nedoc.conf`.

Links cannot span a line! Keep them on a single line.
Links that start with # will not be considered.

Example:
The [`Box`](elsie.box.Box) class is awesome.
"""
import json
import logging
import os
import re
from pathlib import Path

import mkdocs
from mkdocs.plugins import BasePlugin
from nedoc import config, core

LINK_REGEX = re.compile(r"\[`.*?`\]\(((?!#).*?)\)")


def build_nedoc(conf_path: Path, target_dir: Path):
    conf = config.parse_config(str(conf_path))
    conf.target_path = str(target_dir)

    c = core.Core(conf)
    c.build()


class NedocPlugin(BasePlugin):
    """
    This plugin automatically builds nedoc documentation during mkdocs build and also provides
    links into the API documentation from Markdown.
    """
    config_scheme = (
        ("url", mkdocs.config.config_options.Type(str, default="apidoc")),
        ("path", mkdocs.config.config_options.Type(str, default="apidoc")),
    )

    def __init__(self):
        self.site_url = None
        self.url_map = {}
        self.api_links = 0
        self.doc_path = "apidoc"
        self.doc_url = "apidoc"

    def on_config(self, config, **kwargs):
        # Normalize API site url
        self.doc_path = self.config["path"]
        self.doc_url = self.config["url"]

        self.site_url = config.get("site_url") or "/"
        if self.site_url and self.site_url[-1] != "/":
            self.site_url = f"{self.site_url}/"
        self.site_url = f"{self.site_url}{self.doc_url}"

    def on_files(self, files, config, **kwargs):
        # Build API documentation
        docs_dir = Path(config["docs_dir"])
        root_dir = docs_dir.parent
        conf_file = root_dir / "nedoc.conf"
        if not conf_file.exists():
            raise Exception(f"nedoc configuration file {conf_file} does not exist. Run `nedoc "
                            "init`.")

        build_dir = Path(config["site_dir"])
        target_dir = build_dir / self.doc_path

        os.makedirs(target_dir, exist_ok=True)
        build_nedoc(conf_file, target_dir)

        print(f"Generated API documentation into {target_dir}")

        # Load URL map
        map_file = target_dir / "map.json"

        if os.path.isfile(map_file):
            with open(map_file) as f:
                self.url_map = json.load(f)
        else:
            logging.warning(f"WARNING: {map_file} file is missing")

    def on_page_markdown(self, src: str, page, config, *args, **kwargs):
        # TODO: use Markdown parser
        lines = []
        for (line_index, line) in enumerate(src.splitlines(keepends=False)):
            # Iterate from the end to make replacing substrings easier
            for match in reversed(list(LINK_REGEX.finditer(line))):
                link_key = match.group(1)
                link_url = self.url_map.get(link_key)
                if link_url:
                    self.api_links += 1
                    url = f"{self.site_url}/{link_url}"
                    start, end = match.span(1)
                    line = line[:start] + url + line[end:]
                else:
                    raise Exception(f"Link key {link_key} not found in {page.file.src_path} on "
                                    f"line {line_index}")
            lines.append(line)
        return "\n".join(lines)

    def on_post_build(self, config, **kwargs):
        print(f"Found {self.api_links} API links")
